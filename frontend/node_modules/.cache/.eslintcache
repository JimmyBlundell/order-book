[{"/Users/jimmyblundell1/Desktop/rss-feed-reader/frontend/src/index.tsx":"1","/Users/jimmyblundell1/Desktop/rss-feed-reader/frontend/src/reportWebVitals.ts":"2","/Users/jimmyblundell1/Desktop/rss-feed-reader/frontend/src/App.tsx":"3","/Users/jimmyblundell1/Desktop/rss-feed-reader/frontend/src/Pages/Login.tsx":"4","/Users/jimmyblundell1/Desktop/rss-feed-reader/frontend/src/Pages/ErrorPage.tsx":"5","/Users/jimmyblundell1/Desktop/rss-feed-reader/frontend/src/Pages/Home.tsx":"6","/Users/jimmyblundell1/Desktop/rss-feed-reader/frontend/src/Pages/RssFeed.tsx":"7","/Users/jimmyblundell1/Desktop/rss-feed-reader/frontend/src/components/form-input/form-input.tsx":"8"},{"size":512,"mtime":1676943496623,"results":"9","hashOfConfig":"10"},{"size":425,"mtime":1676943496624,"results":"11","hashOfConfig":"10"},{"size":1890,"mtime":1676943496620,"results":"12","hashOfConfig":"10"},{"size":6044,"mtime":1677116328979,"results":"13","hashOfConfig":"10"},{"size":199,"mtime":1676943496621,"results":"14","hashOfConfig":"10"},{"size":6385,"mtime":1676943496621,"results":"15","hashOfConfig":"10"},{"size":3843,"mtime":1676943496622,"results":"16","hashOfConfig":"10"},{"size":490,"mtime":1676943496622,"results":"17","hashOfConfig":"10"},{"filePath":"18","messages":"19","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},"l5ascz",{"filePath":"21","messages":"22","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"23","messages":"24","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"25","usedDeprecatedRules":"20"},{"filePath":"26","messages":"27","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"28","messages":"29","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"30","messages":"31","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"32","usedDeprecatedRules":"20"},{"filePath":"33","messages":"34","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"35","messages":"36","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},"/Users/jimmyblundell1/Desktop/rss-feed-reader/frontend/src/index.tsx",[],["37","38"],"/Users/jimmyblundell1/Desktop/rss-feed-reader/frontend/src/reportWebVitals.ts",[],"/Users/jimmyblundell1/Desktop/rss-feed-reader/frontend/src/App.tsx",["39","40","41"],"import {BrowserRouter as Router, Routes, Route, useNavigate} from 'react-router-dom';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport Nav from 'react-bootstrap/Nav';\nimport Navbar from 'react-bootstrap/Navbar';\nimport Login from \"./Pages/Login\";\nimport Home from \"./Pages/Home\";\nimport ErrorPage from \"./Pages/ErrorPage\";\nimport Axios from \"axios\";\nimport {NavDropdown} from \"react-bootstrap\";\nimport {useEffect, useState} from \"react\";\n\n// logout button is in the nav bar, so need this function here.\nfunction Logout(){\n    try {\n         Axios.get('http://localhost:8000/logout').then((response: any) => {\n            console.log(response);\n            localStorage.clear();\n            window.location.href = \"http://localhost:3000/login\";\n        }).catch((err: any) => {\n            alert(err);\n        });\n    } catch (error) {\n        alert(error)\n    }\n}\n\nconst App = () => {\n    const user = JSON.parse(localStorage.getItem(\"userInfo\") as string);\n    return (\n        <Router>\n            <Navbar bg={\"dark\"} variant={\"dark\"} style={{top: \"-22px\"}}>\n                <Nav>\n                    <Nav.Link href={\"/\"}>Add/View Feeds</Nav.Link>\n                </Nav>\n                {user ?\n                    <Nav>\n                        <NavDropdown title={user.username}>\n                            <NavDropdown.Item onClick={Logout}>Log Out</NavDropdown.Item>\n                        </NavDropdown>\n                    </Nav>\n                    :\n                    <Nav>\n                        <Nav.Link href={\"/login\"}>Log In</Nav.Link>\n                    </Nav>\n                }\n            </Navbar>\n            <Routes>\n                <Route path={\"/\"} element={<Home/>}/>\n                <Route path={\"/login\"} element={<Login/>}/>\n                <Route path={\"*\"} element={<ErrorPage/>}/>\n            </Routes>\n        </Router>\n    )\n}\n\n\nexport default App;","/Users/jimmyblundell1/Desktop/rss-feed-reader/frontend/src/Pages/Login.tsx",[],"/Users/jimmyblundell1/Desktop/rss-feed-reader/frontend/src/Pages/ErrorPage.tsx",[],"/Users/jimmyblundell1/Desktop/rss-feed-reader/frontend/src/Pages/Home.tsx",["42"],"import React, {useState, useEffect} from 'react';\nimport {Button, Dropdown, DropdownButton} from \"react-bootstrap\";\nimport Axios from 'axios';\nimport RssFeed from \"./RssFeed\";\n\nconst Home: React.FC = () => {\n    const [rssFeedUrl, setRssFeedUrl] = useState('');\n    const [rssFeedName, setRssFeedName] = useState('');\n    // collection of all a user's rss feeds\n    const [rssFeeds, setRssFeeds] = useState<{name: string, url: string}[]>([{name: '', url: ''}]);\n    // determine if we are viewing the feed URLs, or results of an rssFeed itself\n    const [isViewingFeed, setIsViewingFeed] = useState(false);\n    // URL for feed we want to view - will use this to fetch feed data\n    const [viewingUrl, setViewingUrl] = useState('');\n\n    const userInfo = JSON.parse(localStorage.getItem('userInfo') as string);\n    const userId = userInfo?.id;\n\n\n\n    useEffect(() => {\n        const fetchData = async () => {\n            if (userId) {\n                try {\n                    const {data} = await Axios.get(`http://localhost:8000/getFeeds/${userId}`, {});\n                    const userFeedInfo: {name: string, url: string }[] = [];\n\n                    for (let i = 0; i< data.length; i++){\n                        const entry = {name: data[i].name, url: data[i].url}\n                        userFeedInfo.push(entry);\n                    }\n                    setRssFeeds(userFeedInfo);\n                } catch (error) {\n                    console.log(error);\n                }\n            }\n            else {\n                return;\n            }\n        }\n        fetchData().then(() => console.log(\"Fetched user rss feeds on page load\"));\n    }, []);\n\n    const addRssFeed = async () => {\n        if (!userId) {\n            alert(\"Missing user information from local storage. Try logging in again\");\n            return;\n        }\n        try {\n            await Axios.post('http://localhost:8000/addRssFeed', {\n                user: userId,\n                name: rssFeedName,\n                url: rssFeedUrl,\n            }).then(() => setRssFeeds([...rssFeeds, {name: rssFeedName, url: rssFeedUrl}]));\n        } catch (error) {\n            console.error(error);\n        }\n    };\n\n    const rssFeedInfoValidation = (name: string, url: string) => {\n        return name.length > 0 && url.length > 0;\n    }\n\n\n    const deleteRssFeed = async (url: string) => {\n        if (!userId) {\n            alert(\"Missing user information from local storage. Try logging in again\");\n            return;\n        }\n        if (!url) {\n            alert(\"Missing url to delete.\");\n            return;\n        }\n        // Encode the url so that the '/' characters don't interfere with routes when passing urls\n        const encodedUrl: string = Buffer.from(url, 'utf8').toString('base64');\n\n        try {\n            await\n                Axios.delete(`http://localhost:8000/deleteRssFeed/${userId}/${encodedUrl}`)\n                    .then(() => {\n                            setRssFeeds(rssFeeds.filter(feed => feed.url !== url));\n                            alert(`Successfully deleted ${url} from your feeds`);\n                        }\n                    )\n        } catch (error) {\n            console.error(error);\n        }\n    }\n\n    return (\n        <div className='App-header' style={{display: 'flex', flexDirection: 'column', alignItems: 'center'}}>\n            {!isViewingFeed &&\n            <div className={\"url-card\"} style={{position: \"absolute\", top: \"60px\"}}>\n                <input type=\"text\" placeholder=\"Enter a name for your RSS feed\" value={rssFeedName}\n                       onChange={(e) => setRssFeedName(e.target.value)}\n                />\n                <br/>\n                <input type=\"text\" placeholder=\"Enter any RSS Feed URL\" value={rssFeedUrl}\n                       onChange={(e) => setRssFeedUrl(e.target.value)}\n                />\n                <br/>\n                <Button\n                    style={{\n                        backgroundColor: \"#45c3e6\",\n                        color: \"#3e3e3e\",\n                        borderColor: \"#45c3e6\",\n                    }}\n                    onClick={addRssFeed}\n                    disabled={!rssFeedInfoValidation(rssFeedName, rssFeedUrl)}\n                >\n                    Save RSS Feed\n                </Button>\n                <br/>\n                <hr/>\n                <br/>\n                <div style={{\n                    display: 'grid',\n                    gridTemplateColumns: \"repeat(auto-fill, minmax(255px, 1fr))\",\n                    gridGap: '20px'\n                }}>\n                    {rssFeeds.map((feed, index) => (\n                        <>\n                            <div className={\"grid-cell\"}>\n                                <DropdownButton\n                                    key={index}\n                                    id=\"dropdown-basic-button\"\n                                    title={\n                                        <div style={{\n                                            maxWidth: '250px',\n                                            overflow: 'hidden',\n                                            textOverflow: 'ellipsis',\n                                            whiteSpace: 'nowrap'\n                                        }}>\n                                            {feed.name}\n                                        </div>\n                                    }\n                                >\n                                <Dropdown.Item\n                                    onClick={() => {\n                                        setIsViewingFeed(true);\n                                        setViewingUrl(feed.url)\n                                    }}\n                                >\n                                    View RSS Feed\n                                </Dropdown.Item>\n                                <Dropdown.Item\n                                    onClick={() => deleteRssFeed(feed.url)}\n                                >\n                                    Delete\n                                </Dropdown.Item>\n                            </DropdownButton>\n                            </div>\n                        </>\n                    ))}\n                </div>\n            </div>\n            }\n            {viewingUrl && <RssFeed url={viewingUrl}/>}\n        </div>\n    );\n};\n\nexport default Home;","/Users/jimmyblundell1/Desktop/rss-feed-reader/frontend/src/Pages/RssFeed.tsx",[],"/Users/jimmyblundell1/Desktop/rss-feed-reader/frontend/src/components/form-input/form-input.tsx",[],{"ruleId":"43","replacedBy":"44"},{"ruleId":"45","replacedBy":"46"},{"ruleId":"47","severity":1,"message":"48","line":1,"column":49,"nodeType":"49","messageId":"50","endLine":1,"endColumn":60},{"ruleId":"47","severity":1,"message":"51","line":10,"column":9,"nodeType":"49","messageId":"50","endLine":10,"endColumn":18},{"ruleId":"47","severity":1,"message":"52","line":10,"column":20,"nodeType":"49","messageId":"50","endLine":10,"endColumn":28},{"ruleId":"53","severity":1,"message":"54","line":42,"column":8,"nodeType":"55","endLine":42,"endColumn":10,"suggestions":"56"},"no-native-reassign",["57"],"no-negated-in-lhs",["58"],"@typescript-eslint/no-unused-vars","'useNavigate' is defined but never used.","Identifier","unusedVar","'useEffect' is defined but never used.","'useState' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'userId'. Either include it or remove the dependency array.","ArrayExpression",["59"],"no-global-assign","no-unsafe-negation",{"desc":"60","fix":"61"},"Update the dependencies array to be: [userId]",{"range":"62","text":"63"},[1652,1654],"[userId]"]