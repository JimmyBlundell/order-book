{"ast":null,"code":"var _jsxFileName = \"/Users/jimmyblundell1/Desktop/rss-feed-reader/frontend/src/Pages/RssFeed.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { Button, Card, Dropdown, DropdownButton } from \"react-bootstrap\";\nimport Parser from 'rss-parser';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst goToLink = url => {\n  window.location.href = url;\n};\nconst RssFeed = _ref => {\n  _s();\n  let {\n    url\n  } = _ref;\n  // will run into cors errors if this is not prepended on the rss feed url\n  // TODO: find better way to proxy avoid cors?\n  const proxy = \"https://cors-anywhere.herokuapp.com/\";\n\n  // state to keep track of how we sort the feeds\n  const [selectedSortCriteria, setSelectedSortCriteria] = useState(\"pubDate\");\n  const [feeds, setFeeds] = useState([]);\n\n  // fetch new content each time url changes\n  useEffect(() => {\n    const fetchData = async () => {\n      const parser = new Parser();\n      const feed = await parser.parseURL(`${proxy}${url}`);\n      const sortedFeeds = feed.items.sort((a, b) => {\n        // sort by date\n        if (selectedSortCriteria === 'date') {\n          // @ts-ignore\n          return new Date(b.pubDate).getTime() - new Date(a.pubDate).getTime();\n        }\n\n        // sort by title\n        if (selectedSortCriteria === 'title') {\n          // @ts-ignore\n          return a.title.localeCompare(b.title);\n        }\n\n        // sort by description\n        if (selectedSortCriteria === 'description') {\n          return a.contentSnippet && b.contentSnippet ? a.contentSnippet.localeCompare(b.contentSnippet) : 0;\n        }\n\n        // by default, return the feed items in their original order\n        return 0;\n      });\n      setFeeds(sortedFeeds);\n    };\n    fetchData().then(() => {});\n  }, [url, selectedSortCriteria]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      width: \"80%\"\n    },\n    children: [/*#__PURE__*/_jsxDEV(DropdownButton, {\n      style: {\n        marginBottom: \"20px\"\n      },\n      title: \"Sort Feeds By:\",\n      children: [/*#__PURE__*/_jsxDEV(Dropdown.Item, {\n        onClick: () => {\n          setSelectedSortCriteria(\"pubDate\");\n        },\n        children: \"Published Date\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Dropdown.Item, {\n        onClick: () => {\n          setSelectedSortCriteria(\"title\");\n        },\n        children: \"Title\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Dropdown.Item, {\n        onClick: () => {\n          setSelectedSortCriteria(\"description\");\n        },\n        children: \"Description\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 13\n    }, this), feeds.map((feed, index) => {\n      let image = null;\n      if (feed.enclosure && feed.enclosure.url) {\n        image = /*#__PURE__*/_jsxDEV(\"img\", {\n          src: feed.enclosure.url,\n          alt: feed.title,\n          height: \"200\",\n          width: \"200\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 86,\n          columnNumber: 29\n        }, this);\n      }\n      return /*#__PURE__*/_jsxDEV(Card, {\n        style: {\n          marginBottom: \"15px\"\n        },\n        children: [/*#__PURE__*/_jsxDEV(Card.Title, {\n          style: {\n            padding: \"20px\"\n          },\n          children: feed.title\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 90,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(Card.Title, {\n          style: {\n            padding: \"20px\"\n          },\n          children: feed.pubDate\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 91,\n          columnNumber: 25\n        }, this), image, /*#__PURE__*/_jsxDEV(Card.Body, {\n          children: [/*#__PURE__*/_jsxDEV(\"p\", {\n            children: feed.description\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 94,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: feed.contentSnippet\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 95,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: feed.creator\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 96,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(Button, {\n            variant: \"primary\",\n            onClick: () => {\n              goToLink(feed.link);\n            },\n            children: \"Open\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 97,\n            columnNumber: 29\n          }, this), \" \"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 93,\n          columnNumber: 25\n        }, this)]\n      }, index, true, {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 21\n      }, this);\n    })]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 58,\n    columnNumber: 9\n  }, this);\n};\n_s(RssFeed, \"58dmknIeDSOHB8bQDT2/aA2IY1U=\");\n_c = RssFeed;\nexport default RssFeed;\nvar _c;\n$RefreshReg$(_c, \"RssFeed\");","map":{"version":3,"names":["React","useState","useEffect","Button","Card","Dropdown","DropdownButton","Parser","goToLink","url","window","location","href","RssFeed","proxy","selectedSortCriteria","setSelectedSortCriteria","feeds","setFeeds","fetchData","parser","feed","parseURL","sortedFeeds","items","sort","a","b","Date","pubDate","getTime","title","localeCompare","contentSnippet","then","width","marginBottom","map","index","image","enclosure","padding","description","creator","link"],"sources":["/Users/jimmyblundell1/Desktop/rss-feed-reader/frontend/src/Pages/RssFeed.tsx"],"sourcesContent":["import React, {useState, useEffect} from 'react';\nimport {Button, Card, Dropdown, DropdownButton} from \"react-bootstrap\";\nimport Parser from 'rss-parser';\n\ntype RssFeedProps = {\n    url: string\n}\n\nconst goToLink = (url: string) => {\n    window.location.href = url;\n}\n\nconst RssFeed = ({url}: RssFeedProps) => {\n\n    // will run into cors errors if this is not prepended on the rss feed url\n    // TODO: find better way to proxy avoid cors?\n    const proxy = \"https://cors-anywhere.herokuapp.com/\";\n\n    // state to keep track of how we sort the feeds\n    const [selectedSortCriteria, setSelectedSortCriteria] = useState<string>(\"pubDate\");\n    const [feeds, setFeeds] = useState<Array<any>>([]);\n\n    // fetch new content each time url changes\n    useEffect(() => {\n        const fetchData = async () => {\n            const parser = new Parser();\n            const feed = await parser.parseURL(`${proxy}${url}`);\n            const sortedFeeds = feed.items.sort((a, b) => {\n                // sort by date\n                if (selectedSortCriteria === 'date') {\n                    // @ts-ignore\n                    return new Date(b.pubDate).getTime() - new Date(a.pubDate).getTime();\n                }\n\n                // sort by title\n                if (selectedSortCriteria === 'title') {\n                    // @ts-ignore\n                    return a.title.localeCompare(b.title);\n                }\n\n                // sort by description\n                if (selectedSortCriteria === 'description') {\n                    return a.contentSnippet && b.contentSnippet ? a.contentSnippet.localeCompare(b.contentSnippet) : 0;\n                }\n\n                // by default, return the feed items in their original order\n                return 0;\n            });\n\n            setFeeds(sortedFeeds);\n        }\n        fetchData().then(() => {\n        });\n    }, [url, selectedSortCriteria]);\n\n\n    return (\n        <div style={{width: \"80%\"}}>\n            <DropdownButton style={{marginBottom: \"20px\"}} title={\"Sort Feeds By:\"}>\n                <Dropdown.Item\n                    onClick={() => {\n                        setSelectedSortCriteria(\"pubDate\");\n                    }}\n                >\n                    Published Date\n                </Dropdown.Item>\n                <Dropdown.Item\n                    onClick={() => {\n                        setSelectedSortCriteria(\"title\");\n                    }}\n                >\n                    Title\n                </Dropdown.Item>\n                <Dropdown.Item\n                    onClick={() => {\n                        setSelectedSortCriteria(\"description\");\n                    }}\n                >\n                    Description\n                </Dropdown.Item>\n\n            </DropdownButton>\n            {feeds.map((feed, index) => {\n                let image = null;\n                if (feed.enclosure && feed.enclosure.url) {\n                    image = <img src={feed.enclosure.url} alt={feed.title} height={\"200\"} width={\"200\"}/>\n                }\n                return (\n                    <Card style={{marginBottom: \"15px\"}} key={index}>\n                        <Card.Title style={{padding: \"20px\"}}>{feed.title}</Card.Title>\n                        <Card.Title style={{padding: \"20px\"}}>{feed.pubDate}</Card.Title>\n                        {image}\n                        <Card.Body>\n                            <p>{feed.description}</p>\n                            <p>{feed.contentSnippet}</p>\n                            <p>{feed.creator}</p>\n                            <Button variant=\"primary\" onClick={() => {goToLink(feed.link)}}>\n                                Open\n                            </Button>{\" \"}\n                        </Card.Body>\n                    </Card>\n                );\n            })}\n        </div>\n    );\n}\n\nexport default RssFeed;"],"mappings":"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"},"metadata":{},"sourceType":"module"}